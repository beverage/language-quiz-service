[tool.poetry]
name = "language-quiz-service"
version = "0.0.1"
description = ""
authors = [ "Alex Beverage" ]
packages = [{include = "src"}]

[tool.poetry.dependencies]
python = "^3.11"
aiohttp = "^3.9.3"
asyncclick = "^8.1.7.2"
asyncpg = "^0.30.0"
backoff = "^2.2.1"
fastapi = "^0.116.0"
greenlet = "^3.0.3"
openai = "^1.86.0"
pydantic = "^2.9.0"
pydantic-settings = "^2.10.0"

supabase = "^2.10.0"
uvicorn = "^0.30.3"
boto3 = "^1.38.22"
rich = "^14.0.0"
slowapi = "^0.1.9"
bcrypt = "^4.3.0"
pytest-xdist = "^3.8.0"
python-dotenv = "^1.1.1"
bump-pydantic = "^0.8.0"
opentelemetry-distro = ">=0.59b0"
opentelemetry-exporter-otlp = "^1.37.0"
opentelemetry-instrumentation-fastapi = ">=0.59b0"
opentelemetry-instrumentation-aiohttp-client = ">=0.59b0"
opentelemetry-instrumentation-asyncpg = ">=0.59b0"
opentelemetry-instrumentation-logging = ">=0.59b0"
grafana-foundation-sdk = "^1759918510!10.1.0"
opentelemetry-instrumentation = ">=0.59b0"
opentelemetry-instrumentation-httpx = ">=0.59b0"
opentelemetry-instrumentation-asgi = ">=0.59b0"
opentelemetry-semantic-conventions = ">=0.59b0"
opentelemetry-util-http = ">=0.59b0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.2.2"
pytest-asyncio = "^0.23.7"
pytest-cov = "^5.0.0"
ruff = "^0.4.8"
pip-audit = "^2.9.0"
faker = "^37.4.0"
pytest-xdist = "^3.8.0"

[tool.poetry.scripts]
lqs = "src.cli.console:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing:skip-covered",
    "--cov-fail-under=80",
    "-ra",
]

markers = [
    "unit: Pure unit tests with mocked dependencies - fast execution",
    "integration: Integration tests with component interactions - mocked external services",
    "functional: API functional tests that can be run with or without authentication",
    "acceptance: End-to-end acceptance tests - full workflows",
    "auth: Authentication and authorization tests",
    "smoke: Basic smoke tests for service health",
    "security: Security-focused tests - authentication, authorization, validation",
]
filterwarnings = [
    # Ignore external dependency warnings we cannot control
    "ignore:Please use `import python_multipart` instead:PendingDeprecationWarning:starlette.*",
    "ignore:The 'app' shortcut is now deprecated.*:DeprecationWarning:httpx.*",
    # Ignore Supabase library deprecation warnings (will be fixed in future library versions)
    "ignore:The 'timeout' parameter is deprecated.*:DeprecationWarning:supabase.*",
    "ignore:The 'verify' parameter is deprecated.*:DeprecationWarning:supabase.*",
    # Ignore async mock warnings from test infrastructure
    "ignore:coroutine 'AsyncMockMixin._execute_mock_call' was never awaited:RuntimeWarning",
]

asyncio_mode = "auto"
pythonpath = "."

[tool.coverage.run]
source = ["src"]
omit = [
    "src/cli/cloud/*",
    "src/cli/console.py",
    "src/cli/sentences/prompts.py",
    "src/cli/verbs/prompts.py",
    "src/cli/utils/*",
    "src/observability/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.ruff]
line-length = 88
target-version = "py311"

[tool.ruff.lint]
select = ["E", "F", "I", "W", "UP"]
ignore = ["E501"]  # Line length (handled by formatter)

[tool.ruff.lint.isort]
known-first-party = ["src"]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["F401", "F811"]  # Allow unused imports (fixtures) and redefinition (pytest injection)

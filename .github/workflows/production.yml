name: Deploy to Production

on:
  workflow_dispatch:
  push:
    branches: [ main ]

permissions:
  contents: read

env:
  FLY_API_TOKEN: ${{ secrets.FLY_DEPLOY_TOKEN }}

jobs:
  check-service:
    name: "🔍 Pre-Deploy Health Check"
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    - uses: superfly/flyctl-actions/setup-flyctl@master
    
    - name: Check service status
      env:
        SERVICE_URL: ${{ secrets.SERVICE_URL }}
      run: |
        echo "🔍 Checking current production service status..."
        if curl -f -s ${SERVICE_URL}/health > /dev/null; then
          echo "✅ Service is currently running"
          echo "Deployment will proceed normally"
        else
          echo "⚠️ Service is currently DOWN"
          echo "Proceeding with deployment (service will start)"
        fi

  test-service:
    name: "🧪 Test Service"
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    - uses: supabase/setup-cli@v1
      with:
        version: latest

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
        
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
      
    - name: Install project
      run: poetry install --no-interaction
      
    - name: Install Supabase
      run: make start-supabase

    - name: Load database schemas
      run: ./scripts/load-schemas.sh

    - name: Run quality checks (format, lint, test)
      run: |
        make format lint
        make test-cov
        
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        token: ${{ secrets.CODECOV_TOKEN }}

  deploy-service:
    name: "🚀 Deploy to Production"
    runs-on: ubuntu-latest
    needs: [check-service, test-service]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    - uses: superfly/flyctl-actions/setup-flyctl@master

    - name: Deploy to production
      run: make deploy ENV=production

  validate-service:
    name: "✅ Validate Deployment"
    runs-on: ubuntu-latest
    needs: [deploy-service]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Health check
      env:
        SERVICE_URL: ${{ secrets.SERVICE_URL }}
      run: |
        echo "🔍 Validating deployment with health check..."
        
        # Wait up to 60 seconds for service to be healthy
        MAX_ATTEMPTS=12
        ATTEMPT=0
        
        while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
          ATTEMPT=$((ATTEMPT + 1))
          echo "Attempt $ATTEMPT of $MAX_ATTEMPTS..."
          
          if curl -f -s ${SERVICE_URL}/health > /dev/null; then
            echo "✅ Service is healthy and responding"
            echo "🎉 Deployment successful!"
            exit 0
          fi
          
          if [ $ATTEMPT -lt $MAX_ATTEMPTS ]; then
            echo "Service not ready yet, waiting 5 seconds..."
            sleep 5
          fi
        done
        
        echo "❌ Service is not responding after ${MAX_ATTEMPTS} attempts"
        echo "Deployment validation failed"
        exit 1

  acceptance-tests:
    name: "🔒 Acceptance Tests"
    runs-on: ubuntu-latest
    needs: [deploy-service, validate-service]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
        
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
      
    - name: Install project
      run: poetry install --no-interaction
      
    - name: Run acceptance tests
      env:
        CI: true
        SERVICE_URL: ${{ secrets.SERVICE_URL }}
        SERVICE_API_KEY: ${{ secrets.SERVICE_API_KEY }}
      run: make test-acceptance
      
    - name: Upload acceptance test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: acceptance-test-results
        path: artifacts/acceptance/results.xml
        
    - name: Rollback on failure
      if: failure()
      uses: superfly/flyctl-actions/setup-flyctl@master
      
    - name: Execute rollback
      if: failure()
      run: |
        echo "❌ Acceptance tests failed - rolling back deployment"
        flyctl releases --app language-quiz-app-production --image --json > releases.json
        PREVIOUS_IMAGE=$(jq -r '.[1].ImageRef' releases.json)
        echo "Rolling back to image: ${PREVIOUS_IMAGE}"
        flyctl deploy --app language-quiz-app-production --image "${PREVIOUS_IMAGE}" --strategy immediate
        echo "::error::Deployment rolled back due to acceptance test failures"
        exit 1